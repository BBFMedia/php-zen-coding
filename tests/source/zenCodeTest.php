<?php

require_once dirname(__FILE__) . '/../../source/zencoding.php';

/**
 * Test class for zenCode.
 * Generated by PHPUnit on 2012-08-04 at 11:51:34.
 */
class zenCodeTest extends PHPUnit_Framework_TestCase {

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers zenCode::_replace
     * @todo Implement test_replace().
     */
    public function test_replace() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers zenCode::_replace_code
     * @todo Implement test_replace_code().
     */
    public function test_replace_code() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers zenCode::_replace_var
     * @todo Implement test_replace_var().
     */
    public function test_replace_var() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
                'This test has not been implemented yet.'
        );
    }

    /**
     * @covers zenCode::_parse
     * @todo Implement test_parse().
     */
    public function testSelectors() {
        
        
        $actual = zenCode::render('div#name');
        $need = '<div id="name"></div>';
        $this->assertEquals($need, $actual);
      
    $actual = zenCode::render('div.name');
        $need = '<div class="name"></div>';
        $this->assertEquals($need, $actual);
       
   $actual = zenCode::render('div.one.two');
        $need = '<div class="one two"></div>';
        $this->assertEquals($need, $actual);
 
   $actual = zenCode::render('div#name.one.two');
        $need = '<div id="name" class="one two"></div>';
        $this->assertEquals($need, $actual);

  $actual = zenCode::render('ul#name>li.item');
        $need = '<ul id="name"><li class="item"></li></ul>';
        $this->assertEquals($need, $actual);

  $actual = zenCode::render('p+p');
        $need = '<p></p><p></p>';
        $this->assertEquals($need, $actual);
        
 $actual = zenCode::render('div#name>p.one+p.two');
        $need = '<div id="name"><p class="one"></p><p class="two"></p></div>';
        $this->assertEquals($need, $actual);

$actual = zenCode::render('p[title="hello"]');
        $need = '<p title="hello"></p>';
        $this->assertEquals($need, $actual);

$actual = zenCode::render('td[colspan="2"]');
        $need = '<td colspan="2"></td>';
        $this->assertEquals($need, $actual);


$actual = zenCode::render('span[title="Hello" rel="test"]');
        $need = '<span title="Hello" rel="test"></span>';
        $this->assertEquals($need, $actual);

$actual = zenCode::render('ul#name>li.item*3');
        $need = '<ul id="name"><li class="item"></li><li class="item"></li><li class="item"></li></ul>';
        $this->assertEquals($need, $actual);



    }

    /**
     * @covers zenCode::render
     * @todo Implement testRender().
     */
    public function testRender() {
        
        //A basic usage
        $actual = zenCode::render('div>ul>li>p["text"]+p["text two"]');
        $need = '<div><ul><li><p> text</p><p> text two</p></li></ul></div>';
        $this->assertEquals($need, $actual);

        //You can pass an array of data and refence with {}. The example also show the enumerator with 3
        $var = array('hello' => 'ni hao', 'test' => array('hello', 'world'));
        $actual = zenCode::render('div>ul>li[{hello}]+li["{test[$]}"]*2', $var);
        $need = "<div><ul><li> ni hao</li><li> hello</li><li> world</li></ul></div>";
        $this->assertEquals($need, $actual);

        //With user functions referenced in an array.
        $actual = zenCode::render('a#test.thisclass.otherclass[ref="{test[0]}"]["content text "]>ul>li#$[href="{test[$]}link"]*2', $var);
        $need = '<a id="test" class="thisclass otherclass" ref="hello"> content text <ul><li id="0" href="hellolink"></li><li id="1" href="worldlink"></li></ul></a>';
        $this->assertEquals($need, $actual);

        // with function calls
        $var = array('a_function1' => 'myfunc1', 'a_function2' => 'myfunc2');
        $actual = zenCode::render('div["{a_function1("test")}+div["{a_function2($)}"]*3', $var);
        $need = "<div> Test</div><div> This 0</div><div> This 1</div><div> This 2</div>";
        $this->assertEquals($need, $actual);

        //Inline Code. Inline code is wrapped with {= }
        $var = array('test' => array('hello', 'world'));
        $actual = zenCode::render('div["{=  return $test[0] . " - ". $test[1]; }"]', $var);
        $need = "<div> hello - world</div>";
        $this->assertEquals($need, $actual);



        $actual = zenCode::render('div["{=  $x = $test[0]; $y = $test[1]; return $x . " - " . $y; }"]', $var);
        $need = "<div> hello - world</div>";
        $this->assertEquals($need, $actual);
    }

}

function myfunc1($str) {
    return ucfirst($str);
}

function myfunc2($index) {
    return 'This ' . $index;
}
